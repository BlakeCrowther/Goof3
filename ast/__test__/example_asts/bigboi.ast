[ Func {
    id: Identifier { name: 'fib' },
    parameters:
     [ Parameter { type: 'whole_number', id: Identifier { name: 'n' } } ],
    body:
     [ GifStatement {
         tests:
          [ BinaryExpression {
              op: '<=',
              left: Identifier { name: 'n' },
              right: Literal { type: 'number', value: 1 } } ],
         consequents:
          [ [ ReturnStatement { returnValue: Identifier { name: 'n' } } ] ],
         alternate: null },
       ReturnStatement {
         returnValue:
          BinaryExpression {
            op: '+',
            left:
             CallExpression {
               callee: Identifier { name: 'fib' },
               args:
                [ BinaryExpression {
                    op: '-',
                    left: Identifier { name: 'n' },
                    right: Literal { type: 'number', value: 2 } } ] },
            right:
             CallExpression {
               callee: Identifier { name: 'fib' },
               args:
                [ BinaryExpression {
                    op: '-',
                    left: Identifier { name: 'n' },
                    right: Literal { type: 'number', value: 1 } } ] } } } ] },
  ForStatement {
    assignments:
     [ VariableDeclaration {
         access: 'global',
         type: 'whole_number',
         id: Identifier { name: 'i' },
         initializers: Literal { type: 'number', value: 11 } } ],
    test:
     BinaryExpression {
       op: '<',
       left: Identifier { name: 'i' },
       right:
        BinaryExpression {
          op: '-',
          left: Identifier { name: 'size' },
          right: Literal { type: 'number', value: 11 } } },
    action:
     BinaryExpression { op: '++', left: Identifier { name: 'i' }, right: undefined },
    body:
     [ VariableDeclaration {
         access: 'constant',
         type: 'whole_number',
         id: Identifier { name: 'dog' },
         initializers: Literal { type: 'number', value: 10 } },
       ReturnStatement {
         returnValue: Literal { type: 'string', value: 'wHYyyYYyYy' } } ] },
  CallExpression {
    callee: 'poof',
    args:
     Literal {
       type: 'string',
       value:
        "you should check out our 'npm run-script format' script, its cool!" } },
  CallExpression {
    callee: 'poof',
    args: Literal { type: 'string', value: 'and thats all she wrote' } } ]