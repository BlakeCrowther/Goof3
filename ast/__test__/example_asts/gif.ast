Block {
  statements: [
    GifStatement {
      tests: [
        BinaryExpression {
          op: '==',
          left: BinaryExpression {
            op: '<',
            left: Literal { type: 'whole_number', value: '1' },
            right: Literal { type: 'whole_number', value: '4' }
          },
          right: Literal { type: 'true_or_false', value: 'toof' }
        },
        BinaryExpression {
          op: '=',
          left: Literal { type: 'whole_number', value: '5' },
          right: Literal { type: 'whole_number', value: '1' }
        }
      ],
      consequents: [
        Block {
          statements: Block {
            statements: [
              CallExpression {
                callee: 'poof',
                args: [ Literal { type: 'array_of_chars', value: 'troof' } ]
              }
            ]
          }
        },
        Block {
          statements: Block {
            statements: [
              CallExpression {
                callee: 'poof',
                args: [ Literal { type: 'array_of_chars', value: 'foof' } ]
              }
            ]
          }
        }
      ],
      alternate: Block {
        statements: Block {
          statements: [
            CallExpression {
              callee: 'poof',
              args: [ Literal { type: 'array_of_chars', value: 'idk' } ]
            }
          ]
        }
      }
    }
  ]
}