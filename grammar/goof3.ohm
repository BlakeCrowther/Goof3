Goof3 {
    Program     = Block
    Block       = (Line | Advanced)*
    Line        = Statement ":"
    Advanced    = Function | If | Loop
    Statement   = access? Type "@" id "=="+ Exp                      -- assignment
                | access? Type "@" id                                -- declaration
                | "yack" stringlit                                   -- throw
                | id "=="+ Exp                                       -- reassignment
                | "poof" "(" stringlit ")"                           -- print
                | "yeet" Exp                                         -- return
                | Exp                                                -- Expression

    Function    = "phoof" id "(" ListOf<Parameter, ","> ")"
                  ";}" Block ";{"                                    -- declaration
    If          = "gif" "(" Exp ")" ";}" Block ";{"
                  ("elsegif" "(" Exp ")" ";}" Block ";{")*
                  ("else" ";}" Block ";{")*
    Loop        = "four" "(" ListOf<Statement_assignment, ",">
                  ":" Exp ":" Exp ")" ";}" Block ";{"                -- for
                | "wooloop" "(" Exp ")" ";}" Block ";{"              -- while

    Exp         = Exp logOp Exp1                                     -- logical
                | Exp1
    Exp1        = Exp1 relOp Exp1                                    -- relative
                | Exp2
    Exp2        = Exp2 addop Exp3                                    -- addition
                | Exp3
    Exp3        = Exp3 mulOp Exp4                                    -- multiplication
                | Exp4
    Exp4        = Exp6 sufixOp                                       -- increment
                | Exp5
    Exp5        = PropAccess
                | id "(" ListOf<Exp, ","> ")"                        -- fCall
                | "[" ListOf<Exp, ","> "]"                           -- ArrayExpression
                | Exp6
    Exp6        = VarExp
                | numlit
                | stringlit
                | boolean
                | PropAccess

    PropAccess  = VarExp "[" Exp "]"                                 -- brackets
                | VarExp "." id                                      -- dot

    VarExp      = id
    comment     = "xD" (~"\n" any)* "\n"                             -- singleLine
                | ";)" (~"(;" any)* "(;"                             -- multiLine

    logOp       = "||" | "&&"
    relOp       = relOp_adv
                | relOp_sim
    relOp_adv   = "<=" "=="*
                | "=" "=="*
                | "!=" "=="*
                | ">=" "=="*
    relOp_sim   = "<"
                | ">"
    mulOp       = "*" | "/" | "%"
    sufixOp     = "++" | "--"
    addop       = "+" | "-"

    Type        = typeid ("[" "]")?
    typeid      = "whole_number" | "true_or_false" | "array_of_chars" | "not_whole_number"

    keyword     = ("goof" | "yeet" | "poof" | "return" | "phoof" |
                  "gif" | "four" | "wooloop" | "xD" | ";)" | "(;"|
                  "elsegif" | "else") ~idrest
    id          = ~keyword letter idrest*
    idrest      = "_" | alnum
    stringlit   = "\"" (~("\""|"\n") any)* "\""
    intlit      = digit+
    declit      = digit+ "." digit*
    numlit      = declit | intlit
    boolean     = "toof" | "foof"
    space       += comment
    access      = "CONSTANT_VARIABLE"
    Parameter   = Type "@" id
}