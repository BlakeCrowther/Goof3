Goof3 {
    Program     = (Line | Advanced)*
    Block       = ";}" Program ";{"
    Line        = Statement ":"
    Advanced    = Function | If | Loop
    Statement   = access? Type "@" id "=="+ Exp                      -- assignment
                | access? Type "@" id                                -- declaration
                | "yack" stringlit                                   -- throw
                | access? id "=="+ Object                            -- objDec
                | (PropAccess | VarExp) "=="+ Exp                    -- reassignment
                | "poof" "(" Exp ")"                                 -- print
                | yeet Exp                                           -- return
                | "boof"                                             -- break
                | Exp                                                -- Expression

    Function    = "phoof" id "(" ListOf<Parameter, ","> ")" Block    -- declaration
    If          = "gif" "(" Exp ")" Block
                  ("elsegif" "(" Exp ")" Block)*
                  ("else" Block)?
    Loop        = "four" "(" ListOf<Statement_assignment, ",">
                  ":" Exp ":" Statement_reassignment ")" Block       -- for
                | "wooloop" "(" Exp ")" Block                        -- while

    Exp         = Exp logOp Exp1                                     -- logical
                | Exp1
    Exp1        = Exp1 relOp Exp1                                    -- relative
                | Exp2
    Exp2        = Exp2 addop Exp3                                    -- addition
                | Exp3
    Exp3        = Exp3 mulOp Exp4                                    -- multiplication
                | Exp4
    Exp4        = Exp6 sufixOp                                       -- increment
                | Exp5
    Exp5        = (PropAccess | id) "(" ListOf<Exp, ","> ")"         -- fCall
                | PropAccess
                | "[" ListOf<Exp, ","> "]"                           -- ArrayExpression
                | Exp6
    Exp6        = VarExp
                | numlit
                | stringlit
                | boolean
                | PropAccess
                | Object
                | null
                | Paren_Exp

    PropAccess  = VarExp "[" Exp "]"                                 -- brackets
                | VarExp "." id                                      -- dot

    VarExp      = id
    comment     = "xD" (~"\n" any)* "\n"                             -- singleLine
                | ";)" (~"(;" any)* "(;"                             -- multiLine

    logOp       = "||" | "&&"
    relOp       = relOp_adv
                | relOp_sim
    relOp_adv   = "<=" "=="*
                | "=" "=="*
                | "!=" "=="*
                | ">=" "=="*
    relOp_sim   = "<" | ">"
    mulOp       = "*" | "/" | "%"
    sufixOp     = "++" | "--"
    addop       = "+" | "-"

    Type        = typeid ("[" "]")?
    typeid      = "whole_number" | "true_or_false" | "array_of_chars" | "not_whole_number"

    keyword     = ("goof" | yeet | "poof" | "yack" | "phoof" | "toof" | "foof" | "boof" |
                  "gif" | "four" | "wooloop" | "xD" | ";)" | "(;"| "elsegif" | "else" | "temp"
                  | typeid) ~idrest
    id          = ~keyword letter idrest*
    idrest      = "_" | alnum
    stringlit   = "\"" (~("\""|"\n") any)* "\""
    intlit      = "-"? digit+
    declit      = "-"? digit+ "." digit*
    numlit      = declit | intlit
    boolean     = "toof" | "foof"
    null        = "temp"
    space       += comment
    access      = "CONSTANT_VARIABLE" | "LOCAL_VARIABLE" | "GLOBAL_VARIABLE"
    Parameter   = Type "@" id


    Object      = "#" ListOf<Property, ","> "#"
    Property    = Field | Method
    Field       = Type "@" id "~" Exp
    Method      = Function

    yeet        = "ye" "e"+ "t"

    Paren_Exp   = "(" Exp ")"
}